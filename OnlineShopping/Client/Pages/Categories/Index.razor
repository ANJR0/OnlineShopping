@page "/categories/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable



<h3 class="card-title">Category</h3>

<a href="/Categories/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Category
</a>
<br />
<br />

@if (Categories == null)
{
    <div class="alert alert-info">Loading Category...</div>
}
else
{
    <table class="table table-responsive"  id="categoriesTable">
        <thead>
            <tr>
                <th>Category ID</th>
                <th>Category Name</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in Categories)
            {
                <tr>
                    <td>@category.CategoryID </td>
                    <td>@category.CategoryNAME</td>
                    <td>@category.Description</td>
                    @*<td>@category.Thumbnail</td>*@
                    <td>
                        <a href="/Categories/view/@category.CategoryID" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/Categories/edit/@category.CategoryID" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(category.CategoryID))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    private List<Category> Categories;

    protected async override Task OnInitializedAsync()
    {
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndPoint}");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#categoriesTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#categoriesTable");
    }

    async Task Delete(int CategoryId)
    {
        var Category = Categories.First(q => q.CategoryID == CategoryId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Category.CategoryID}?");
        if (confirm)

        {
            await _client.DeleteAsync($"{Endpoints.CategoriesEndPoint}/{CategoryId}");
            await OnInitializedAsync();
        }
    }

}
