@page "/products/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3>Product</h3>
<a href="/Products/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Product
</a>
<br />
<br />

@if (Products == null)
{
    <div class="alert alert-info">Loading Product...</div>
}
else
{
    <table class="table table-responsive" id="productsTable">
        <thead>
            <tr>
                <th>Product ID</th>
                <th>Product Name</th>
                <th>Product Price</th>
                <th>Description</th>
                <th>Stocks</th>
                <th>Category Name</th>
                <th>Brand Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Product in Products)
            {
                <tr>
                    <td>@Product.ProductID </td>
                    <td>@Product.ProductNAME</td>
                    <td>@Product.ProductPRICE</td>
                    <td>@Product.Description</td>
                    <td>@Product.Stocks</td>
                    <td>@Product.Category.CategoryNAME</td>
                    <td>@Product.Brand.BrandNAME</td>
                    <td>
                        <a href="/Products/view/@Product.ProductID" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/Products/edit/@Product.ProductID" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(Product.ProductID))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product> Products;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndPoint}");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#productsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#productsTable");
    }

    async Task Delete(int ProductID)
    {
        var Product = Products.First(q => q.ProductID == ProductID);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Product.ProductNAME}?");
        if (confirm)

        {
            await _client.DeleteAsync($"{Endpoints.ProductsEndPoint}/{ProductID}");
            await OnInitializedAsync();
        }
    }

}
