@inject HttpClient _client
<EditForm Model="@product" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form‐group">
            <label>Product Name: </label>
            <div>
                <InputText @bind-Value="@product.ProductNAME" class="form‐control" />
                <ValidationMessage For="@(() => product.ProductNAME)" />
            </div>
        </div>
        <div class="form‐group">
            <label>Product Price: </label>
            <div>
                <InputText @bind-Value="@product.ProductPRICE" class="form‐control" />
                <ValidationMessage For="@(() => product.ProductPRICE)" />
            </div>
        </div>
        <div class="form‐group">
            <label>Description: </label>
            <div>
                <InputText @bind-Value="@product.Description" class="form‐control" />
                <ValidationMessage For="@(() => product.Description)" />
            </div>
        </div>
        <div class="form‐group">
            <label>Stocks: </label>
            <div>
                <InputText @bind-Value="@product.Stocks" class="form‐control" />
                <ValidationMessage For="@(() => product.Stocks)" />
            </div>
        </div>
        <div class="form‐group">
            <label>Catergory: </label>
            <div>
                <InputSelect @bind-Value="product.CategoryID" class="form-control">
                    <option value="">-- Select Product --</option>
                    @if (Categories != null)
                    {
                        foreach (var category in Categories)
                        {
                            <option value="@category.CategoryID">
                                 @category.CategoryNAME
                            </option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => product.CategoryID)" />
            </div>
        </div>
        <div class="form‐group">
            <label>Brand: </label>
            <div>
                <InputSelect @bind-Value="product.BrandID" class="form-control">
                    <option value="">-- Select Product --</option>
                    @if (Brands != null)
                    {
                        foreach (var brand in Brands)
                        {
                            <option value="@brand.BrandID">
                                 @brand.BrandNAME
                            </option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => product.BrandID)" />
            </div>
        </div>
    </fieldset><br />
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="products"/>
</EditForm>
@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Product product { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Category> Categories;
    private IList<Brand> Brands;

    protected async override Task OnInitializedAsync()
    {
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndPoint}");
        Brands = await _client.GetFromJsonAsync<List<Brand>>($"{Endpoints.BrandsEndPoint}");
    }
}
