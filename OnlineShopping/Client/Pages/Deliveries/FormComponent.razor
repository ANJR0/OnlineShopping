@inject HttpClient _client
<EditForm Model="@delivery" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form‐group">
            <label>Delivery Date: </label>
            <div>
                <InputDate @bind-Value="@delivery.DeliveryDATE" class="form‐control" />
                <ValidationMessage For="@(() => delivery.DeliveryDATE)" />
            </div>
        </div>
        <div class="form‐group">
            <label>Staff ID : </label>
            <div>
                <InputSelect @bind-Value="@delivery.StaffID" class="form-control">
                    <option value="">-- Select Order --</option>
                    @if (Staffs != null)
                    {
                        foreach (var staff in Staffs)
                        {
                            <option value="@staff.StaffID">
                                @staff.StaffName - @staff.StaffEMAIL
                            </option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => delivery.StaffID)" />
            </div>
        </div>
    </fieldset><br />
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="deliveries" />
</EditForm>
@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Delivery delivery { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Staff> Staffs;

    protected async override Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndPoint}");
    }
}